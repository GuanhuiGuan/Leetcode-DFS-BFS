class Solution {
    // 1: visited
    int[] flag;
    // 0, 1, 2: white, gray, black
    int[] color;
    boolean pos;
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // dfs to find if there is a cycle
        // directed graph
        // can add a predecessor list to track back the cycle
        
        // 1: visited
        flag = new int[numCourses];
        // 0, 1, 2: white, gray, black
        color = new int[numCourses];
        pos = true;
        
        // adjacent list
        List<List<Integer>> adjList = new ArrayList<>();
        for(int i = 0; i < numCourses; i++) adjList.add(new ArrayList<>());
        for(int[] edge: prerequisites){
            adjList.get(edge[0]).add(edge[1]);
        }
        
        for(int node = 0; node < numCourses; node++){
            if(flag[node] == 0) dfs(node, adjList);
        }
        
        return pos;
    }
    
    public void dfs(int node, List<List<Integer>> adjList){
        flag[node] = 1;
        color[node] = 1;
        for(int v: adjList.get(node)){
            if(flag[v] == 0) dfs(v, adjList);
            else if(color[v] == 1)  pos = false;
        }
        color[node] = 2;
    }
}
